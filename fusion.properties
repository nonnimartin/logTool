# Uncomment and change this address to point to external Zookeeper or ensemble
# If you have external Zk and don't want to run Zk as part of Fusion service
# then make sure to remove "zookeeper" service from "group.default" (see below)
# default.zk.connect = localhost:9983

# Uncomment and change this address if you want to use external SolrCloud cluster
# Make sure to remove "solr" service from "group.default" (see below)
# default.solrZk.connect = localhost:2181/solr-zk-namespace

# the list of services that should be started with "bin/fusion start"
# optional services are spark-master, spark-worker, sql
group.default = zookeeper, solr, api, connectors-classic, connectors-rpc, proxy, webapps, admin-ui


# Default properties
#
# any property that begins with "default." applies to all services, unless specifically overridden in that service's
# properties. For example, if we have the setting "default.gc = cms", and then "api.gc = g1", then the API service uses
# the G1 garbage collector, while other services use CMS (unless they, too, have gc properties specified).


# "address" is the ip / hostname that is used for inter-node or inter-component communication
# Usually this address is published to Zk so that nodes/components can discover each other
# By default it is one non localhost ip address discovered programmatically
#default.address = 127.0.0.1

# The default garbage collection options are "cms", "g1", "throughput" or "parallel", "serial" or "none". The specific
# JVM settings for each option are defined at the bottom of this file.
default.gc = cms
# enable garbage collection logs. These are logged into each service's directory, and roll over after 10 MB, with
# the 20 most recent files retained.
default.gcLog = true

# turn on or off supervision of services through the Fusion Agent. Allowed values are "standard" and "none". Set to
# "none" to disable supervision (if, for example, you are using another package for process supervision).
default.supervision.type = standard

# Agent periodically polls services to determine if they are alive and responsive. The following settings configure
# that behavior for all services. Create service-specific properties to override these properties for specific services
# e.g. api.supervision.pollingFailureCountThreshold = 3
# Note that these properties only take effect if supervision.type = standard
# Increasing either of these settings makes the system more resilient to long GC pauses, but makes it take
# longer to react to service failures.
#
# pollingFailureCountThreshold sets the number of successive failed polls that the Agent allows before declaring a
# service dead and restarting it. By default (with a value of "1"), it declares the service dead on the second
# successive failed poll.
default.supervision.pollingFailureCountThreshold = 1
# This sets the time between polls
default.supervision.pollingIntervalMillis = 1000

# Set explicit timezone for the services. (Default: UTC)
default.timezone=UTC

# The number of seconds agent will wait for a service to be up and ready before declaring failure.
default.startSecs=360

# capture host and services metrics
# and ship them to system_monitor Solr collection
default.collectMetrics = true
default.collectMetricsIntervalSecs = 30

# Agent process
agent.port = 8091

# API service
api.port = ${API_PORT:-8765}
api.stopPort = 7765
api.jvmOptions = -Xmx${API_MEM:-1g} -Xss256k -Dhttp.maxConnections=1000

# Connectors RPC service
connectors-rpc.port = ${CONNECTORS_RPC_PORT:-8771}
connectors-rpc.pluginPortRangeStart = 8871
connectors-rpc.pluginPortRangeEnd = 8971
connectors-rpc.jvmOptions = -Xmx${CONNECTORS_RPC_MEM:-1g} -Xss256k -Xms512m

# Connectors service
connectors-classic.port = ${CONNECTORS_CLASSIC_PORT:-8984}
connectors-classic.stopPort = 7984
connectors-classic.jvmOptions = -Xmx${CONNECTORS_CLASSIC_MEM:-1g} -Xss256k

# Zookeeper
zookeeper.port = 9983
zookeeper.jvmOptions = -Xmx${ZOOKEEPER_MEM:-256m}

# Solr
solr.port = ${SOLR_PORT:-8983}
solr.stopPort = 7983
solr.jvmOptions = -Xmx${SOLR_MEM:-2g} -Xss256k

# Spark master
spark-master.port = ${SPARK_MASTER_PORT:-8766}
spark-master.uiPort = ${SPARK_MASTER_UI_PORT:-8767}
spark-master.jvmOptions = -Xmx${SPARK_MASTER_MEM:-512m}
spark-master.envVars={"SPARK_HOME": "${sparkHome}", "HADOOP_HOME": "${hadoopHome}", "SPARK_SCALA_VERSION": "2.11", "SPARK_PUBLIC_DNS": "${default.address}", "SPARK_LOCAL_IP": "${default.address}"}

# Spark worker
spark-worker.port = ${SPARK_WORKER_PORT:-8769}
spark-worker.uiPort = 8770
spark-worker.jvmOptions = -Xmx${SPARK_WORKER_MEM:-1g}
spark-worker.envVars={"SPARK_HOME": "${sparkHome}", "HADOOP_HOME": "${hadoopHome}", "SPARK_WORKER_CORES": "10", "SPARK_SCALA_VERSION": "2.11", "SPARK_PUBLIC_DNS": "${default.address}", "SPARK_LOCAL_IP": "${default.address}"}

# Admin UI
admin-ui.port = ${ADMIN_UI_PORT:-8763}
admin-ui.stopPort = 7763
admin-ui.jvmOptions = -Xmx${ADMIN_UI_MEM:-512m}

# Proxy
proxy.port = ${PROXY_PORT:-8764}
proxy.stopPort = 7764
proxy.jvmOptions = -Xmx${PROXY_MEM:-512m}
# Make sure to enable ssl mode if you disable http access in jetty
# see https://doc.lucidworks.com/fusion-server/latest/system-administration/security/ssl.html#enabling-ssl-in-the-fusion-ui
# proxy.ssl=false
#
# Takes a regular expression defining which origins Fusion allows access from, using CORS standard.
# Note that (?!) won't match any host so all cross-origin requests will be disallowed.
# Use the following to allow requests from any location:
# proxy.corsAllowOrigin = .*
proxy.corsAllowOrigin = (?!)

# SQL engine
sql.port = ${SQL_PORT:-8768}
sql.jvmOptions = -Xmx${SQL_MEM:-1g}
sql.envVars={"SPARK_HOME": "${sparkHome}", "HADOOP_HOME": "${hadoopHome}", "SPARK_SCALA_VERSION": "2.11", "SPARK_PUBLIC_DNS": "${default.address}", "SPARK_LOCAL_IP": "${default.address}"}

# Webapps Server
webapps.port = ${WEBAPPS_PORT:-8780}
webapps.stopPort = 7780
webapps.jvmOptions = -Xmx${WEBAPPS_MEM:-512m}

# you can limit this Webapps service instance to deploy only particular apps
# webapps.appIds = app1, app2

# register web applications for custom / selective routing
webapps.routing_group=webapp

# Log Shipper
# monitoring port
log-shipper.port = ${LOG_SHIPPER_PORT:-8781}
# bind to localhost only
log-shipper.address = 127.0.0.1

# Uncomment and change this address if you want to index log messages
# into another externally manageable cluster
# log-shipper.solrZk.connect = localhost:2181/solr-zk-namespace

# Change collection name to index log messages to any custom Solr collection
# Make sure that this collection exists
log-shipper.solrCollection = system_logs

# Change collection name to index JMX metrics to any custom Solr collection
# Make sure that this collection exists
log-shipper.metricsSolrCollection = system_monitor

# Alternatively if you want to send logs to Solr HTTP endpoint without Zk access
# specify Solr http address instead
# log-shipper.solrHttp = http://localhost:8983/solr

# Basic Authentication For Solr
#log-shipper.solrUser=
#log-shipper.solrPass=

# By default log-shipper ignores log messages caused by ping requests and frequent internal system calls
# If you want to have all log messages shipped to Solr you might want to disable this feature
log-shipper.noPings = true

# You can ship Fusion logs of three different types:
# 1. java - java logs
# 2. http - HTTP access logs from web servers
# 3. gc - garbage collection logs
log-shipper.logs.proxy = java, http
log-shipper.logs.zookeeper = java
log-shipper.logs.api = java
log-shipper.logs.connectors = java
log-shipper.logs.admin-ui = java
log-shipper.logs.webapps = java
log-shipper.logs.spark-master = java
log-shipper.logs.spark-worker = java
log-shipper.logs.agent = java
# DO NOT ship Solr logs unless you enabled shipping to external Solr cluster (see log-shipper.solrZk.connect above)
# log-shipper.logs.solr = java, http

log-shipper.jvmOptions = -Xms256m -Xmx512m
log-shipper.supervision.type = none
log-shipper.collectMetrics = true

# Add custom values to your log files by replacing customFieldName and customValue as desired.
# Multiple custom values are allowed.
#log-shipper.custom.customFieldName = customValue

# Log level for log-shipper component itself
# The logs can be found in var/log/log-shipper
log-shipper.logLevel = info


# these define the default garbage collection options. You may define your own configurations as you wish: to define a
# new GC option named "custom", for example, create a property named "gcOptions.custom" and set the value to whatever
# you would like added to the JVM command line.
gcOptions.cms=-XX:NewRatio=3 -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8 \
  -XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 -XX:+CMSScavengeBeforeRemark \
  -XX:PretenureSizeThreshold=64m -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 \
  -XX:CMSMaxAbortablePrecleanTime=6000 -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled
gcOptions.cms.java8=-XX:+UseParNewGC -XX:+UseConcMarkSweepGC
gcOptions.g1=-XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=250 -XX:+AggressiveOpts -XX:InitiatingHeapOccupancyPercent=75
gcOptions.throughput=-XX:+UseParallelGC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=250
gcOptions.serial=-XX:+UseSerialGC
gcOptions.none=
